Oliphant is a library that uses change notifications from database servers to improve the management of objects via the Hibernate Java ORM.

Change notifications allow the library to detect stale objects before they are sent back to the database, and to remove them from the L2 cache.

Oliphant is still a proof of concept. It works with PostgreSQL using a C function that sends notifications to Oliphant via a file. We are working on a patch to PostgreSQL that would allow arbitrary payloads in PostgreSQL notifications, meaning Oliphant could work with native PostgreSQL notifications.

Oliphant is distributed under the Lesser GNU Public License (LGP).

To use oliphant, you just need to add the jar or classes to your classpath and call the NotifyListener.attachListener static method on your hibernate configuration object before using it to get your hibernate session factory. You also need to set the specific notify listener to be used depending on your database server. For now, the only supported one is the PostgreSQLNotifyListener that comes in the package.

It should look something like this :

AnnotationConfiguration magicConfig = new AnnotationConfiguration();

magicConfig.setProperty("hibernate.dialect", "org.hibernate.dialect.PostgreSQLDialect");
magicConfig.setProperty("oliphant.specific_listener", "fr.keyconsulting.oliphant.PostgreSQLNotifyListener");
magicConfig.setProperty("oliphant.allow_stale_load", "true");

NotifyListener.attachListener(magicConfig);
magicSessionFactory = magicConfig.buildSessionFactory();

config.addAnnotatedClass(PersistentVersionedObject.class);


You will then get a staleObjectStateException sooner when trying to persist a stale object, and the hibernate L2 cache if used will be cleared of said stale object.
