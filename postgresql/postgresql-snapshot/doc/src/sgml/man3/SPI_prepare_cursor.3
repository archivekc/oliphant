'\" t
.\"     Title: SPI_prepare_cursor
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 2009-12-01
.\"    Manual: PostgreSQL snapshot Documentation
.\"    Source: PostgreSQL snapshot
.\"  Language: English
.\"
.TH "SPI_PREPARE_CURSOR" "3" "2009-12-01" "PostgreSQL snapshot" "PostgreSQL snapshot Documentation"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
SPI_prepare_cursor \- prepare a plan for a command, without executing it yet
.\" SPI_prepare_cursor
.SH "SYNOPSIS"
.sp
.nf
SPIPlanPtr SPI_prepare_cursor(const char * \fIcommand\fR, int \fInargs\fR,
                              Oid * \fIargtypes\fR, int \fIcursorOptions\fR)
.fi
.SH "DESCRIPTION"
.PP
\fBSPI_prepare_cursor\fR
is identical to
\fBSPI_prepare\fR, except that it also allows specification of the planner\(aqs
\(lqcursor options\(rq
parameter\&. This is a bitmask having the values shown in
nodes/parsenodes\&.h
for the
options
field of
DeclareCursorStmt\&.
\fBSPI_prepare\fR
always takes the cursor options as zero\&.
.SH "ARGUMENTS"
.PP
const char * \fIcommand\fR
.RS 4
command string
.RE
.PP
int \fInargs\fR
.RS 4
number of input parameters ($1,
$2, etc\&.)
.RE
.PP
Oid * \fIargtypes\fR
.RS 4
pointer to an array containing the
OIDs of the data types of the parameters
.RE
.PP
int \fIcursorOptions\fR
.RS 4
integer bitmask of cursor options; zero produces default behavior
.RE
.SH "RETURN VALUE"
.PP
\fBSPI_prepare_cursor\fR
has the same return conventions as
\fBSPI_prepare\fR\&.
.SH "NOTES"
.PP
Useful bits to set in
\fIcursorOptions\fR
include
CURSOR_OPT_SCROLL,
CURSOR_OPT_NO_SCROLL, and
CURSOR_OPT_FAST_PLAN\&. Note in particular that
CURSOR_OPT_HOLD
is ignored\&.
