'\" t
.\"     Title: LISTEN
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 2009-12-01
.\"    Manual: PostgreSQL snapshot Documentation
.\"    Source: PostgreSQL snapshot
.\"  Language: English
.\"
.TH "LISTEN" "7" "2009-12-01" "PostgreSQL snapshot" "PostgreSQL snapshot Documentation"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
LISTEN \- listen for a notification
.\" LISTEN
.SH "SYNOPSIS"
.sp
.nf
LISTEN \fIname\fR
.fi
.SH "DESCRIPTION"
.PP
LISTEN
registers the current session as a listener on the notification condition
\fIname\fR\&. If the current session is already registered as a listener for this notification condition, nothing is done\&.
.PP
Whenever the command
NOTIFY \fIname\fR
is invoked, either by this session or another one connected to the same database, all the sessions currently listening on that notification condition are notified, and each will in turn notify its connected client application\&. See the discussion of
NOTIFY
for more information\&.
.PP
A session can be unregistered for a given notify condition with the
UNLISTEN
command\&. A session\(aqs listen registrations are automatically cleared when the session ends\&.
.PP
The method a client application must use to detect notification events depends on which
PostgreSQL
application programming interface it uses\&. With the
libpq
library, the application issues
LISTEN
as an ordinary SQL command, and then must periodically call the function
\fBPQnotifies\fR
to find out whether any notification events have been received\&. Other interfaces such as
libpgtcl
provide higher\-level methods for handling notify events; indeed, with
libpgtcl
the application programmer should not even issue
LISTEN
or
UNLISTEN
directly\&. See the documentation for the interface you are using for more details\&.
.PP
NOTIFY
contains a more extensive discussion of the use of
LISTEN
and
NOTIFY\&.
.SH "PARAMETERS"
.PP
\fIname\fR
.RS 4
Name of a notify condition (any identifier)\&.
.RE
.SH "EXAMPLES"
.PP
Configure and execute a listen/notify sequence from
psql:
.sp
.if n \{\
.RS 4
.\}
.nf
LISTEN virtual;
NOTIFY virtual;
Asynchronous notification "virtual" received from server process with PID 8448\&.
.fi
.if n \{\
.RE
.\}
.SH "COMPATIBILITY"
.PP
There is no
LISTEN
statement in the SQL standard\&.
.SH "SEE ALSO"
NOTIFY, UNLISTEN
