'\" t
.\"     Title: SAVEPOINT
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 2009-12-01
.\"    Manual: PostgreSQL snapshot Documentation
.\"    Source: PostgreSQL snapshot
.\"  Language: English
.\"
.TH "SAVEPOINT" "7" "2009-12-01" "PostgreSQL snapshot" "PostgreSQL snapshot Documentation"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
SAVEPOINT \- define a new savepoint within the current transaction
.\" SAVEPOINT
.\" savepoints: defining
.SH "SYNOPSIS"
.sp
.nf
SAVEPOINT \fIsavepoint_name\fR
.fi
.SH "DESCRIPTION"
.PP
SAVEPOINT
establishes a new savepoint within the current transaction\&.
.PP
A savepoint is a special mark inside a transaction that allows all commands that are executed after it was established to be rolled back, restoring the transaction state to what it was at the time of the savepoint\&.
.SH "PARAMETERS"
.PP
\fIsavepoint_name\fR
.RS 4
The name to give to the new savepoint\&.
.RE
.SH "NOTES"
.PP
Use
ROLLBACK TO SAVEPOINT
to rollback to a savepoint\&. Use
RELEASE SAVEPOINT
to destroy a savepoint, keeping the effects of commands executed after it was established\&.
.PP
Savepoints can only be established when inside a transaction block\&. There can be multiple savepoints defined within a transaction\&.
.SH "EXAMPLES"
.PP
To establish a savepoint and later undo the effects of all commands executed after it was established:
.sp
.if n \{\
.RS 4
.\}
.nf
BEGIN;
    INSERT INTO table1 VALUES (1);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (2);
    ROLLBACK TO SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (3);
COMMIT;
.fi
.if n \{\
.RE
.\}
.sp
The above transaction will insert the values 1 and 3, but not 2\&.
.PP
To establish and later destroy a savepoint:
.sp
.if n \{\
.RS 4
.\}
.nf
BEGIN;
    INSERT INTO table1 VALUES (3);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (4);
    RELEASE SAVEPOINT my_savepoint;
COMMIT;
.fi
.if n \{\
.RE
.\}
.sp
The above transaction will insert both 3 and 4\&.
.SH "COMPATIBILITY"
.PP
SQL requires a savepoint to be destroyed automatically when another savepoint with the same name is established\&. In
PostgreSQL, the old savepoint is kept, though only the more recent one will be used when rolling back or releasing\&. (Releasing the newer savepoint will cause the older one to again become accessible to
ROLLBACK TO SAVEPOINT
and
RELEASE SAVEPOINT\&.) Otherwise,
SAVEPOINT
is fully SQL conforming\&.
.SH "SEE ALSO"
BEGIN, COMMIT, RELEASE SAVEPOINT, ROLLBACK, ROLLBACK TO SAVEPOINT
